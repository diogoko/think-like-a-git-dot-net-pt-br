--- title: "Coleta de Lixo" layout: section ---

<p>Imagine a seguinte cena: você escreveu algum código e fez commit. Aí você percebe que esqueceu de rodar os testes, e você os executa, e eles mostram um erro de sintaxe. Ou você percebe um erro de digitação. Por qualquer motivo, você não tinha terminando quando achou que tinha terminado.

<p>Antes quando eu usava o Subversion, a única coisa a fazer sobre isso era adicionar a nova alteração num novo commit. Geralmente, eu acabava ficando com três ou quatro versões no meu histórico. A primeira diria "adicionar funcionalidade X", e as próximas teriam mensagens como "opa, erro de digitação" ou "correção de erro" ou "esqueci de rodar os testes".</p>

<p>O Git te dá outra opção: você pode incluir a nova alteração no commit anterior usando <code class="inline">git commit --amend</code>. Isso deixa todas as suas alterações relacionadas unidas num único commit, para que você possa entendê-lo mais rápido quando estiver revisando-o mais tarde.</p>

<p>Eis outro fato interessante sobre os commits do Git: o ID de um commit é um <a href="http://en.wikipedia.org/wiki/SHA-1">hash SHA-1</a> de vários pedaços de informação: o conteúdo do commit, <strong>e os IDs dos seus commits pais</strong>.</p>

<p>Isso significa que, quando você usa <code class="inline">git commit --amend</code>, você na verdade está construindo um commit completamente diferente, e apontando a referência do seu branch local para ele em vez do original. <strong>O primeiro commit que você fez ainda está lá no disco, e você ainda pode recuperá-lo</strong> (mais sobre isso depois). Entretando, no interesse de não embaralhar a sua visualização, nem <code class="inline">git log</code> nem seu visualizador Git o mostrará, porque não é parte do histórico de algo [que o Git entenda] que você precise.</p>

<p>Em algum momento, o Git vai decidir que é hora de rodar a <a href="http://en.wikipedia.org/wiki/Garbage_collection_(computer_science)#Reachability_of_an_object">coleta de lixo</a>. (Você mesmo pode iniciar este processo, usando <code class="inline">git gc</code>.) Iniciando de cada branch e cada tag, o Git caminha de volta pelo grafo, construindo uma lista de todos os commits que ele consegue alcançar. Depois que ele acha o fim de cada caminho, ele exclui todos os commits que não visitou.</p>
