---
title: HALP!
---



<h1>AJUDA!</h1>

<p>Se você acabou de perder algum trabalho no Git e você está tentando recuperar seus commits perdidos, esta página é para você. Talvez você tenha tentado um rebase, ou se perdeu numa porção de conflitos de merge, e o Git não fez o que você achou que ira fazer, e agora você não consegue ver o commit que contém suas últimas horas de trabalho.</p>

<h2>Não Entre em Pânico.</h2>

<p>Provavelmente você não fez nada exótico. Seu commit provavelmente ainda está lá no disco e você somente não consegue vê-lo.</p>

<h2>Descubra onde você está neste momento</h2>

<p><strong>Eu vou assumir que você está num branch.</strong> Você pode confirmar isso digitando <code class="inline">git status</code> no seu repositório. A primeira linha deve dizer "On branch master" (ou "On branch branch-muito-importante" ou seja lá qual for o nome do branch em que você está). <strong>Se não, por favor faça um backup do seu diretório antes de continuar e tente conseguir ajuda de algum especialista</strong>! Eu não tenho como cobrir todas as possibilidades num documento como este e detestaria piorar a sua situação neste momento.</p>

<p>Se a segunda linha <strong>não</strong> diz "nothing to commit (working directory clean)", você tem alterações que ainda não foram salvas. Você pode ser capaz de salvá-las usando 'git stash', ou você pode copiar alguns arquivos para outro diretório se for muito paranóico. Ou talvez você nem ligue...</p>

<p><strong>Se você estava no meio de um rebase e alguma coisa esquisita aconteceu,</strong> talvez você possa digitar <code class="inline">git rebase --abort</code> e voltar para uma situação anterior ao problema. Primeiro, porém, tente navegar no seu histórico do console; o Git imprime uma mensagem dizendo o que você deve fazer toda vez que ele para durante um rebase.</p>

<p><strong>Se você tentou um merge e ficou preso resolvendo conflitos de merge horrorosos,</strong> <code class="inline">git status</code> pode incluir uma mensagem como "Unmerged paths:" seguida por uma lista de arquivos. Se você só quer desfazer o merge, você provavelmente pode usar <code class="inline">git reset</code> para fazer isso. Se você <em>realmente</em> tem certeza de que não precisa das alterações atuais (ou seja, você começou o merge a partir de um estado de trabalho limpo), <code class="inline">git reset --hard</code> pode ser o que você quer.</p>

<p><strong>Se você fez um merge e parece que deu certo, mas agora quer desfazê-lo,</strong> simplesmente use <code class="inline">git reset --hard</code> para apontar o seu branch de volta para o commit em que ele estava logo antes de você fazer o merge. (Você deve poder ver isso na saída do <code class="inline">git log</code> ou seu visalizador, mas se não conseguir, continue lendo.)</p>

<h2>Procurando seu commit perdido</h2>

<p>Em qualquer branch que você esteja, essa é a boa notícia: o Git guarda todo commit para o qual aquele branch tenha apontado em qualquer momento. Ele faz isso no que é chamado de 'reflog' <em>(uma abreviação de "reference log", ou histórico de referências)</em> para seu branch, que fica no seguinte arquivo texto: <strong>[repository-root]/.git/logs/refs/heads/[branch-name]</strong>. O reflog para o branch <strong>master</strong> está em <strong>.git/logs/refs/heads/master</strong>, e o reflog para  <strong>branch-muito-importante</strong> está em <strong>.git/logs/refs/heads/branch-muito-importante</strong>, e assim por diante.</p>

<p>Então... Respire fundo, va até a raiz do seu repositório na linha de comando, e digite isso: <code class="inline">cat .git/logs/refs/heads/master</code></p>

<p>Você deve ver uma porção de linhas no formato:</p>

<p>[SHA1 antigo] [SHA1 novo] [Autor] [Data/hora] [Mensagem de commit]</p>

<p>As linhas mais novas estão no final. A partir daqui, você deve ser capaz de achar a linha contendo a mensagem de commit para o commit que você quer tanto recuperar. A segunda coluna nessa linha é o SHA1 que você quer. <strong>Selecione esse sem vergonha e copie para sua área de transferência.</strong></p>

<h2>Pegando seu trabalho de volta</h2>

<p>Isso vai ser um pouco decepcionante, mas é isso que você fará:</p>

<code>
  git checkout deadbeef # onde 'deadbeef' é o SHA1 que você acabou de encontrar e copiar git branch eu_quero_o_codigo_de_volta
</code>

<p>Se você está usando um visualizador como GitX ou gitk, volte para ele e atualize a visualização. (Você pode precisar forçá-lo a mostrar todos os branches locais). Ou, faça <code class="inline">git log --pretty=oneline --abbrev-commit --branches=* --graph --decorate</code> se você é raiz. Seu commit deve estar visível de novo, com um branch 'eu_quero_o_codigo_de_volta' ao lado dele.</p>

<h2>Resumindo</h2>

<p>Eu espero que isso tenha sido útil. De qualquer forma, por favor me escreva por email ou Twitter e me avise se houver maneiras de melhorar este guia.</p>

<p>Depois que a sua frequência cardíaca baixar um pouco, você pode dar uma passeada neste site. Não deve levar mais de uma hora para lera a coisa toda, mas se você estiver com pressa, dê uma olhada na página <%= page_link('tldr') %>.</p>

<p>No resto da Internéte, veja o <a href="http://programblings.com/2008/06/07/the-illustrated-guide-to-recovering-lost-commits-with-git/">The Illustrated Guide to Recovering Lost Commits With Git</a> quando tiver uma meia hora para estudar os exemplos.</p>

<p>
Bom hacking! <br />-Sam
</p>

